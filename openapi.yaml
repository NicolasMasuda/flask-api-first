openapi: 3.0.3
info:
  title: APIFirst Flask con Validación de Usuarios
  version: 1.0.0
  description: API con validación automática usando OpenAPI

servers:
  - url: http://127.0.0.1:5000
    description: Servidor local de desarrollo

components:
  schemas:
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 40
          example: "Smartphone XYZ"
        description:
          type: string
          maxLength: 500
          example: "Último modelo con pantalla AMOLED y cámara de 108MP"
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          example: 599.99
        category:
          type: string
          enum:
            - electronics
            - books
            - ropa
            - food
          example: "electronics"
        tags:
          type: array
          minItems: 1
          items:
            type: string
          example: ["tecnología", "mobile", "smartphone"]
        inStock:
          type: boolean
          example: true
        specifications:
          type: object
          additionalProperties:
            type: string
          example:
            processor: "Snapdragon 8 Gen 2"
            ram: "12GB"
            storage: "256GB"
            screen: "6.7 inches"
        ratings:
          type: array
          items:
            type: object
            properties:
              score:
                type: integer
                minimum: 1
                maximum: 5
                example: 5
              comment:
                type: string
                maxLength: 200
                example: "Excelente producto, muy rápido y buena cámara"

paths:
  /hello:
    get:
      summary: Endpoint de prueba hello world
      operationId: helloWorld
      responses:
        '200':
          description: Respuesta exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hello World!"

  /users:
    post:
      operationId: createUser
      summary: Crear un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Juan Pérez"
                age:
                  type: integer
                  minimum: 18
                  maximum: 100
                  example: 25
                email:
                  type: string
                  format: email
                  example: "juan@ejemplo.com"
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string
  /users/{id}:
    get:
      operationId: getUserById
      summary: Obtener un usuario por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string
    post:
      operationId: updateUser
      summary: Actualizar un usuario existente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Juan Pérez Actualizado"
                age:
                  type: integer
                  minimum: 18
                  maximum: 100
                  example: 26
                email:
                  type: string
                  format: email
                  example: "juan.actualizado@ejemplo.com"
      responses:
        '200':
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string

  /products:
    post:
      operationId: createProduct
      summary: Crear un nuevo producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Producto creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string

    get:
      operationId: getProducts
      summary: Obtener lista de productos
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
            enum:
              - electronics
              - books
              - ropa
              - food
          description: Filtrar productos por categoría
        - name: inStock
          in: query
          required: false
          schema:
            type: boolean
          description: Filtrar productos en stock
      responses:
        '200':
          description: Lista de productos obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      operationId: getProductById
      summary: Obtener un producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del producto
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string

    put:
      operationId: updateProduct
      summary: Actualizar un producto existente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del producto a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Producto actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string

    delete:
      operationId: deleteProduct
      summary: Eliminar un producto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del producto a eliminar
      responses:
        '204':
          description: Producto eliminado correctamente
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: string